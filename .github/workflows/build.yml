name: Build PDF Utilities

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Windows executable
      run: |
        python build_app.py
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: PDFUtilities-Windows
        path: dist/PDFUtilities.exe
        retention-days: 30
        
    - name: Create release assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        mkdir -p release-assets
        copy dist\PDFUtilities.exe release-assets\PDFUtilities-Windows.exe
        
    - name: Upload release assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: release-assets/
        retention-days: 90

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Linux executable
      run: |
        python build_app.py
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v3
      with:
        name: PDFUtilities-Linux
        path: dist/PDFUtilities
        retention-days: 30
        
    - name: Create release assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        mkdir -p release-assets
        cp dist/PDFUtilities release-assets/PDFUtilities-Linux
        
    - name: Upload release assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: release-assets-linux
        path: release-assets/
        retention-days: 90

  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run basic tests
      run: |
        python -c "import sys; print('Python version:', sys.version)"
        python -c "from PyQt6.QtWidgets import QApplication; print('PyQt6 imported successfully')"
        python -c "import fitz; print('PyMuPDF imported successfully')"
        python -c "from pdf2docx import Converter; print('pdf2docx imported successfully')"
        python -c "from PIL import Image; print('Pillow imported successfully')"
        
    - name: Test application startup
      run: |
        timeout 10s python main.py || echo "Application started successfully (timeout expected)" 