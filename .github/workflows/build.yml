name: Build PDF Utilities

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Windows executable
      run: |
        python build_app.py
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFUtilities-Windows
        path: dist/PDFUtilities.exe
        retention-days: 30
        
    - name: Create release assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        mkdir -p release-assets
        copy dist\PDFUtilities.exe release-assets\PDFUtilities-Windows.exe
        
    - name: Upload release assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: release-assets/
        retention-days: 90

  build-linux:
    runs-on: ubuntu-20.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libx11-6 libxext6 libxrender1 libxtst6 libxi6 libegl1 libegl-mesa0
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Linux executable
      run: |
        python build_app.py
        echo "=== Build completed. Checking dist directory ==="
        ls -la dist/ || echo "dist directory not found"
        echo "=== Looking for any PDFUtilities files ==="
        find . -name "*PDFUtilities*" -type f || echo "No PDFUtilities files found"
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFUtilities-Linux
        path: dist/PDFUtilities*
        retention-days: 30
        if-no-files-found: warn
        
    - name: Create release assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        mkdir -p release-assets
        if [ -f "dist/PDFUtilities" ]; then
          cp dist/PDFUtilities release-assets/PDFUtilities-Linux
          echo "Copied single file executable"
        elif [ -d "dist/PDFUtilities" ]; then
          cp -r dist/PDFUtilities release-assets/PDFUtilities-Linux
          echo "Copied directory structure"
        else
          echo "No PDFUtilities found in dist/"
          ls -la dist/ || echo "dist directory not found"
        fi
        
    - name: Upload release assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: release-assets-linux
        path: release-assets/
        retention-days: 90

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        # Install Homebrew if not already available
        if ! command -v brew &> /dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install required system libraries
        brew install libpng jpeg zlib
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build macOS executable
      run: |
        # Set environment variables to help with macOS build
        export PYTHONPATH=$PWD:$PYTHONPATH
        # Build with additional PyInstaller options for macOS
        python build_app.py
        echo "=== Build completed. Checking dist directory ==="
        ls -la dist/ || echo "dist directory not found"
        echo "=== Looking for any PDFUtilities files ==="
        find . -name "*PDFUtilities*" || echo "No PDFUtilities files found"
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFUtilities-macOS
        path: dist/PDFUtilities*
        retention-days: 30
        if-no-files-found: warn
        
    - name: Create release assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        mkdir -p release-assets
        if [ -d "dist/PDFUtilities" ]; then
          cp -r dist/PDFUtilities release-assets/PDFUtilities-macOS
          echo "Copied directory structure"
        elif [ -f "dist/PDFUtilities" ]; then
          cp dist/PDFUtilities release-assets/PDFUtilities-macOS
          echo "Copied single file executable"
        else
          echo "No PDFUtilities found in dist/"
          ls -la dist/ || echo "dist directory not found"
        fi
        
    - name: Upload release assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: release-assets-macos
        path: release-assets/
        retention-days: 90

  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies for testing
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libx11-6 libxext6 libxrender1 libxtst6 libxi6 libegl1 libegl-mesa0 xvfb
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run basic tests
      run: |
        python -c "import sys; print('Python version:', sys.version)"
        python -c "import fitz; print('PyMuPDF imported successfully')"
        python -c "from pdf2docx import Converter; print('pdf2docx imported successfully')"
        python -c "from PIL import Image; print('Pillow imported successfully')"
        
    - name: Test PyQt6 import with virtual display
      run: |
        xvfb-run -a python -c "from PyQt6.QtWidgets import QApplication; print('PyQt6 imported successfully with virtual display')"
        
    - name: Test application startup with virtual display
      run: |
        timeout 10s xvfb-run -a python main.py || echo "Application started successfully (timeout expected)" 