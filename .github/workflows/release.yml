name: Create Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Windows executable
      run: |
        python build_app.py
        
    - name: Verify Windows build
      run: |
        if (Test-Path "dist/PDFUtilities.exe") {
          Write-Host "Windows executable created successfully"
          Get-Item "dist/PDFUtilities.exe" | Select-Object Name, Length
        } else {
          Write-Error "Windows executable not found"
          exit 1
        }
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFUtilities-Windows
        path: dist/PDFUtilities.exe
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libx11-6 libxext6 libxrender1 libxtst6 libxi6 libegl1 libegl-mesa0
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Linux executable
      run: |
        python build_app.py
        
    - name: Verify Linux build
      run: |
        if [ -f "dist/PDFUtilities" ]; then
          echo "Linux executable created successfully"
          ls -la dist/PDFUtilities
        else
          echo "Error: Linux executable not found"
          exit 1
        fi
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFUtilities-Linux
        path: dist/PDFUtilities
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        # Install Homebrew if not already available
        if ! command -v brew &> /dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install required system libraries
        brew install libpng jpeg zlib
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build macOS executable
      run: |
        echo "Building macOS executable for current architecture..."
        python build_app.py
        
    - name: Verify macOS build
      run: |
        echo "Verifying macOS build..."
        
        if [ -d "dist/PDFUtilities" ]; then
          echo "✅ macOS build found"
          ls -la dist/PDFUtilities/
          file dist/PDFUtilities/PDFUtilities
          lipo -info dist/PDFUtilities/PDFUtilities || echo "lipo info not available"
          
          # Determine architecture
          ARCH=$(uname -m)
          echo "Built on architecture: $ARCH"
        else
          echo "❌ macOS build not found"
          exit 1
        fi
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFUtilities-macOS
        path: dist/PDFUtilities
        retention-days: 30

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: PDFUtilities-Windows
        path: ./windows-build
        
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: PDFUtilities-Linux
        path: ./linux-build
        
    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: PDFUtilities-macOS
        path: ./macos-build
      continue-on-error: true
        
    - name: Verify artifacts
      run: |
        echo "Verifying downloaded artifacts..."
        
        # Check Windows
        if [ -d "./windows-build" ]; then
          ls -la ./windows-build/
          if [ ! -f "./windows-build/PDFUtilities.exe" ]; then
            echo "Error: Windows executable not found"
            exit 1
          fi
          echo "✅ Windows build verified"
        else
          echo "❌ Windows build directory not found"
          exit 1
        fi
        
        # Check Linux
        if [ -d "./linux-build" ]; then
          ls -la ./linux-build/
          if [ ! -f "./linux-build/PDFUtilities" ]; then
            echo "Error: Linux executable not found"
            exit 1
          fi
          echo "✅ Linux build verified"
        else
          echo "❌ Linux build directory not found"
          exit 1
        fi
        
        # Check macOS
        if [ -d "./macos-build" ]; then
          echo "✅ macOS build found"
          ls -la ./macos-build/
          file ./macos-build/PDFUtilities
          lipo -info ./macos-build/PDFUtilities || echo "lipo info not available"
          
          # Determine architecture
          ARCH=$(uname -m)
          echo "Built on architecture: $ARCH"
        else
          echo "❌ macOS build not found"
          exit 1
        fi
        
        echo "All required artifacts verified successfully"
        
    - name: Create source archive
      run: |
        git archive --format=zip --output=PDFUtilities-Source.zip HEAD
        ls -la PDFUtilities-Source.zip
        
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        RELEASE_NAME="PDF Utilities $VERSION"
        
        echo "Creating release for version: $VERSION"
        
        # Create release using GitHub CLI
        gh release create $VERSION \
          --title "$RELEASE_NAME" \
          --notes "## PDF Utilities $VERSION
        
        ### Features
        - PDF to DOCX conversion
        - PDF compression with multiple quality levels
        - PDF merging
        - PDF splitting
        - Text extraction
        - PDF to image conversion
        - Separate macOS builds for Intel and Apple Silicon architectures
        
        ### Downloads
        - Windows executable
        - Linux executable
        - macOS executable
        - Source code
        
        ### System Requirements
        - Windows 10+ or Linux or macOS 10.15+
        - Python 3.11+ (for source installation)
        
        ### Installation
        Download the appropriate executable for your platform and run it directly.
        
        ### macOS Notes
        - macOS executable is architecture-specific
        - May require security permissions on first run (System Preferences > Security & Privacy)" \
          --draft=false \
          --prerelease=false
        
        echo "Release created successfully"
        
    - name: Upload Windows executable
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Uploading Windows executable for version: $VERSION"
        gh release upload $VERSION ./windows-build/PDFUtilities.exe --clobber
        echo "Windows executable uploaded successfully"
        
    - name: Upload Linux executable
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Uploading Linux executable for version: $VERSION"
        gh release upload $VERSION ./linux-build/PDFUtilities --clobber
        echo "Linux executable uploaded successfully"
        
    - name: Upload macOS executable
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Uploading macOS executable for version: $VERSION"
        gh release upload $VERSION ./macos-build/PDFUtilities --clobber
        echo "macOS executable uploaded successfully"
        
    - name: Upload source code
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Uploading source code for version: $VERSION"
        gh release upload $VERSION ./PDFUtilities-Source.zip --clobber
        echo "Source code uploaded successfully"
        
    - name: Verify release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Verifying release assets for version: $VERSION"
        gh release view $VERSION --json assets --jq '.assets[].name'
        echo "Release verification completed" 