name: Create Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Windows executable
      run: |
        # Extract version from tag and create version file
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
        echo "Building version: $VERSION"
        
        # Create version file
        echo $VERSION > version.txt
        
        # Build the executable
        python build_with_version.py --version $VERSION
        
    - name: Verify Windows build
      run: |
        if (Test-Path "dist/PDFUtilities.exe") {
          Write-Host "Windows executable created successfully"
          Get-Item "dist/PDFUtilities.exe" | Select-Object Name, Length
        } else {
          Write-Error "Windows executable not found"
          exit 1
        }
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFUtilities-Windows
        path: dist/PDFUtilities.exe
        retention-days: 30

  build-windows-arm:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Windows ARM64 executable
      run: |
        echo "Building Windows ARM64 executable..."
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Architecture: $(python -c 'import platform; print(platform.machine())')"
        
        # Extract version from tag and create version file
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
        echo "Building version: $VERSION"
        
        # Create version file
        echo $VERSION > version.txt
        
        # Check if spec file exists
        if (!(Test-Path "pdf_utility.spec")) {
          Write-Error "pdf_utility.spec not found!"
          Get-ChildItem
          exit 1
        }
        
        Write-Host "pdf_utility.spec found"
        
        # Run the new build script with version embedding
        Write-Host "Running build_with_version.py..."
        python build_with_version.py --version $VERSION
        
        # Check build result
        $BUILD_EXIT_CODE = $LASTEXITCODE
        Write-Host "Build exit code: $BUILD_EXIT_CODE"
        
        if ($BUILD_EXIT_CODE -ne 0) {
          Write-Error "Build failed with exit code: $BUILD_EXIT_CODE"
          Write-Host "Contents of current directory:"
          Get-ChildItem
          if (Test-Path "build") {
            Write-Host "Contents of build directory:"
            Get-ChildItem build/
          }
          if (Test-Path "dist") {
            Write-Host "Contents of dist directory:"
            Get-ChildItem dist/
          }
          exit 1
        }
        
        Write-Host "Windows ARM64 build completed successfully"
        
    - name: Verify Windows ARM64 build
      run: |
        Write-Host "Verifying Windows ARM64 build..."
        Write-Host "Contents of current directory:"
        Get-ChildItem
        
        if (Test-Path "dist") {
          Write-Host "Contents of dist directory:"
          Get-ChildItem dist/
        } else {
          Write-Error "dist directory not found"
          exit 1
        }
        
        if (Test-Path "dist/PDFUtilities.exe") {
          Write-Host "Windows ARM64 executable file found"
          Write-Host "File information:"
          Get-Item "dist/PDFUtilities.exe" | Select-Object Name, Length, LastWriteTime
          Write-Host "Windows ARM64 build verification complete"
        } else {
          Write-Error "Windows ARM64 executable file not found"
          Write-Host "Available items in dist:"
          Get-ChildItem dist/
          exit 1
        }
        
    - name: Upload Windows ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFUtilities-Windows-arm64
        path: dist/PDFUtilities.exe
        retention-days: 30
      if: always() && hashFiles('dist/PDFUtilities.exe') != ''

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libx11-6 libxext6 libxrender1 libxtst6 libxi6 libegl1 libegl-mesa0
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build Linux executable
      run: |
        # Extract version from tag and create version file
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $VERSION"
        
        # Create version file
        echo $VERSION > version.txt
        
        # Build the executable
        python build_with_version.py --version $VERSION
        
    - name: Verify Linux build
      run: |
        if [ -f "dist/PDFUtilities" ]; then
          echo "Linux executable created successfully"
          ls -la dist/PDFUtilities
        else
          echo "Error: Linux executable not found"
          exit 1
        fi
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFUtilities-Linux
        path: dist/PDFUtilities
        retention-days: 30

  # build-linux-arm:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #       with:
  #         platforms: arm64
  #     - name: Build ARM64 binary in Docker
  #       run: |
  #         docker run --rm --platform linux/arm64 \
  #           -v ${{ github.workspace }}:/workspace \
  #           -w /workspace \
  #           arm64v8/python:3.11 \
  #           /bin/bash -c "\
  #             apt-get update && \
  #             apt-get install -y libgl1 libglib2.0-0 libx11-6 libxext6 libxrender1 libxtst6 libxi6 libegl1 libegl-mesa0 && \
  #             pip install --upgrade pip && \
  #             pip install -r requirements.txt && \
  #             pip install pyinstaller && \
  #             python build_app.py\
  #           "
  #     - name: Upload Linux ARM artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: PDFUtilities-Linux-arm64
  #         path: dist/PDFUtilities*
  #         retention-days: 30
  #         if-no-files-found: warn

  build-macos-arm:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        # Install Homebrew if not already available
        if ! command -v brew &> /dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install required system libraries
        brew install libpng jpeg zlib
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build macOS executable
      run: |
        echo "Building macOS executable..."
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Architecture: $(uname -m)"
        
        # Extract version from tag and create version file
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $VERSION"
        
        # Create version file
        echo $VERSION > version.txt
        
        # Check if spec file exists
        if [ ! -f "pdf_utility.spec" ]; then
          echo "❌ Error: pdf_utility.spec not found!"
          echo "Available files:"
          ls -la
          exit 1
        fi
        
        echo "✅ pdf_utility.spec found"
        
        # Run the new build script with version embedding
        echo "Running build_with_version.py..."
        python build_with_version.py --version $VERSION
        
        # Check build result
        BUILD_EXIT_CODE=$?
        echo "Build exit code: $BUILD_EXIT_CODE"
        
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "❌ Build failed with exit code: $BUILD_EXIT_CODE"
          echo "Contents of current directory:"
          ls -la
          if [ -d "build" ]; then
            echo "Contents of build directory:"
            ls -la build/
          fi
          if [ -d "dist" ]; then
            echo "Contents of dist directory:"
            ls -la dist/
          fi
          exit 1
        fi
        
        echo "✅ macOS build completed successfully"
        
    - name: Verify macOS build
      run: |
        echo "Verifying macOS build..."
        echo "Contents of current directory:"
        ls -la
        
        if [ -d "dist" ]; then
          echo "Contents of dist directory:"
          ls -la dist/
        else
          echo "❌ dist directory not found"
          exit 1
        fi
        
        if [ -f "dist/PDFUtilities" ]; then
          echo "✅ macOS executable file found"
          echo "File information:"
          file dist/PDFUtilities
          echo "Architecture information:"
          lipo -info dist/PDFUtilities || echo "lipo info not available"
          echo "File size:"
          ls -lh dist/PDFUtilities
          echo "✅ macOS build verification complete"
        else
          echo "❌ macOS executable file not found"
          echo "Available items in dist:"
          ls -la dist/
          exit 1
        fi
        
    - name: Upload macOS ARM artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFUtilities-macOS-arm64
        path: dist/PDFUtilities
        retention-days: 30
      if: always() && hashFiles('dist/PDFUtilities/**') != ''

  build-macos-intel:
    runs-on: macos-13  # Intel-based runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        # Install Homebrew if not already available
        if ! command -v brew &> /dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install required system libraries
        brew install libpng jpeg zlib
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build macOS Intel executable
      run: |
        echo "Building macOS Intel executable..."
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Architecture: $(uname -m)"
        
        # Extract version from tag and create version file
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $VERSION"
        
        # Create version file
        echo $VERSION > version.txt
        
        # Check if spec file exists
        if [ ! -f "pdf_utility.spec" ]; then
          echo "❌ Error: pdf_utility.spec not found!"
          echo "Available files:"
          ls -la
          exit 1
        fi
        
        echo "✅ pdf_utility.spec found"
        
        # Run the new build script with version embedding
        echo "Running build_with_version.py..."
        python build_with_version.py --version $VERSION
        
        # Check build result
        BUILD_EXIT_CODE=$?
        echo "Build exit code: $BUILD_EXIT_CODE"
        
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "❌ Build failed with exit code: $BUILD_EXIT_CODE"
          echo "Contents of current directory:"
          ls -la
          if [ -d "build" ]; then
            echo "Contents of build directory:"
            ls -la build/
          fi
          if [ -d "dist" ]; then
            echo "Contents of dist directory:"
            ls -la dist/
          fi
          exit 1
        fi
        
        echo "✅ macOS Intel build completed successfully"
        
    - name: Verify macOS Intel build
      run: |
        echo "Verifying macOS Intel build..."
        echo "Contents of current directory:"
        ls -la
        
        if [ -d "dist" ]; then
          echo "Contents of dist directory:"
          ls -la dist/
        else
          echo "❌ dist directory not found"
          exit 1
        fi
        
        if [ -f "dist/PDFUtilities" ]; then
          echo "✅ macOS Intel executable file found"
          echo "File information:"
          file dist/PDFUtilities
          echo "Architecture information:"
          lipo -info dist/PDFUtilities || echo "lipo info not available"
          echo "File size:"
          ls -lh dist/PDFUtilities
          echo "✅ macOS Intel build verification complete"
        else
          echo "❌ macOS Intel executable file not found"
          echo "Available items in dist:"
          ls -la dist/
          exit 1
        fi
        
    - name: Upload macOS Intel artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDFUtilities-macOS-x64
        path: dist/PDFUtilities
        retention-days: 30
      if: always() && hashFiles('dist/PDFUtilities/**') != ''

  create-release:
    needs: [build-windows, build-windows-arm, build-linux, build-macos-arm, build-macos-intel]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: PDFUtilities-Windows
        path: ./windows-build
        
    - name: Download Windows ARM64 artifact
      uses: actions/download-artifact@v4
      with:
        name: PDFUtilities-Windows-arm64
        path: ./windows-arm-build
      continue-on-error: true
        
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: PDFUtilities-Linux
        path: ./linux-build
        
    - name: Download macOS ARM artifact
      uses: actions/download-artifact@v4
      with:
        name: PDFUtilities-macOS-arm64
        path: ./macos-arm-build
      continue-on-error: true
        
    - name: Download macOS Intel artifact
      uses: actions/download-artifact@v4
      with:
        name: PDFUtilities-macOS-x64
        path: ./macos-intel-build
      continue-on-error: true
        
    - name: Verify artifacts
      run: |
        echo "Verifying downloaded artifacts..."
        
        # Check Windows
        if [ -d "./windows-build" ]; then
          ls -la ./windows-build/
          if [ ! -f "./windows-build/PDFUtilities.exe" ]; then
            echo "❌ Error: Windows executable not found"
            exit 1
          fi
          echo "✅ Windows build verified"
        else
          echo "❌ Windows build directory not found"
          exit 1
        fi
        
        # Check Windows ARM64
        if [ -d "./windows-arm-build" ]; then
          echo "✅ Windows ARM64 build directory found"
          echo "Contents of windows-arm-build:"
          ls -la ./windows-arm-build/
          
          if [ -f "./windows-arm-build/PDFUtilities.exe" ]; then
            echo "✅ Windows ARM64 executable found"
            echo "File information:"
            file ./windows-arm-build/PDFUtilities.exe
            echo "✅ Windows ARM64 build verified"
          else
            echo "❌ PDFUtilities.exe not found in windows-arm-build directory"
            echo "Available files:"
            ls -la ./windows-arm-build/
            echo "⚠️  Windows ARM64 build not available, continuing..."
          fi
        else
          echo "❌ Windows ARM64 build directory not found"
          echo "⚠️  Windows ARM64 build not available, continuing..."
        fi
        
        # Check Linux
        if [ -d "./linux-build" ]; then
          ls -la ./linux-build/
          if [ ! -f "./linux-build/PDFUtilities" ]; then
            echo "❌ Error: Linux executable not found"
            exit 1
          fi
          echo "✅ Linux build verified"
        else
          echo "❌ Linux build directory not found"
          exit 1
        fi
        
        # Check macOS ARM (should be a single executable file)
        if [ -d "./macos-arm-build" ]; then
          echo "✅ macOS ARM build directory found"
          echo "Contents of macos-arm-build:"
          ls -la ./macos-arm-build/
          
          if [ -f "./macos-arm-build/PDFUtilities" ]; then
            echo "✅ macOS ARM executable found"
            echo "File information:"
            file ./macos-arm-build/PDFUtilities
            echo "Architecture information:"
            lipo -info ./macos-arm-build/PDFUtilities || echo "lipo info not available"
            echo "✅ macOS ARM build verified"
          else
            echo "❌ PDFUtilities executable not found in macos-arm-build directory"
            echo "Available files:"
            ls -la ./macos-arm-build/
            exit 1
          fi
        else
          echo "❌ macOS ARM build directory not found"
          echo "Available directories:"
          ls -la ./
          exit 1
        fi
        
        # Check macOS Intel (should be a single executable file)
        if [ -d "./macos-intel-build" ]; then
          echo "✅ macOS Intel build directory found"
          echo "Contents of macos-intel-build:"
          ls -la ./macos-intel-build/
          
          if [ -f "./macos-intel-build/PDFUtilities" ]; then
            echo "✅ macOS Intel executable found"
            echo "File information:"
            file ./macos-intel-build/PDFUtilities
            echo "Architecture information:"
            lipo -info ./macos-intel-build/PDFUtilities || echo "lipo info not available"
            echo "✅ macOS Intel build verified"
          else
            echo "❌ PDFUtilities executable not found in macos-intel-build directory"
            echo "Available files:"
            ls -la ./macos-intel-build/
            exit 1
          fi
        else
          echo "❌ macOS Intel build directory not found"
          echo "Available directories:"
          ls -la ./
          exit 1
        fi
        
        echo "✅ All required artifacts verified successfully"
        
    - name: Create source archive
      run: |
        git archive --format=zip --output=PDFUtilities-Source.zip HEAD
        ls -la PDFUtilities-Source.zip
        
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        RELEASE_NAME="PDF Utilities $VERSION"
        
        echo "Creating release for version: $VERSION"
        
        # Create release using GitHub CLI
        gh release create $VERSION \
          --title "$RELEASE_NAME" \
          --notes "## PDF Utilities $VERSION
        
        ### Features
        - PDF to DOCX conversion
        - PDF compression with multiple quality levels
        - PDF merging
        - PDF splitting
        - Text extraction
        - PDF to image conversion
        
        ### Downloads
        - **Windows (x64)**: PDFUtilities-Windows-x64.exe
        - **Windows (ARM64)**: PDFUtilities-Windows-arm64.exe
        - **Linux (x64)**: PDFUtilities-Linux-x64
        - **macOS (Apple Silicon/ARM64)**: PDFUtilities-macOS-arm64
        - **macOS (Intel/x64)**: PDFUtilities-macOS-x64
        - **Source code**: PDFUtilities-Source.zip
        
        ### System Requirements
        - **Windows**: Windows 10+ (x64 or ARM64)
        - **Linux**: Ubuntu 18.04+ or equivalent (x64)
        - **macOS**: macOS 10.15+ (both Intel and Apple Silicon processors supported)
        - **Source**: Python 3.11+ (for source installation)
        
        ### Installation
        1. Download the appropriate executable for your platform
        2. Make it executable (Linux/macOS): \`chmod +x PDFUtilities-*\`
        3. Run the executable directly
        
        ### Notes
        - **macOS**: Choose the appropriate build for your Mac processor (Intel x64 or Apple Silicon ARM64)
        - **macOS**: May require security permissions on first run (System Preferences > Security & Privacy)
        - **Linux**: Tested on Ubuntu 20.04+, should work on most modern distributions
        - **Windows**: No additional dependencies required" \
          --draft=false \
          --prerelease=false
        
        echo "Release created successfully"
        
    - name: Upload Windows executable
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Uploading Windows executable for version: $VERSION"
        # Rename the Windows executable to include OS and architecture
        cp ./windows-build/PDFUtilities.exe ./PDFUtilities-Windows-x64.exe
        gh release upload $VERSION ./PDFUtilities-Windows-x64.exe --clobber
        echo "Windows executable uploaded successfully as PDFUtilities-Windows-x64.exe"
        
    - name: Upload Windows ARM64 executable
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Uploading Windows ARM64 executable for version: $VERSION"
        if [ -f "./windows-arm-build/PDFUtilities.exe" ]; then
          # Rename the Windows ARM64 executable to include OS and architecture
          cp ./windows-arm-build/PDFUtilities.exe ./PDFUtilities-Windows-arm64.exe
          gh release upload $VERSION ./PDFUtilities-Windows-arm64.exe --clobber
          echo "Windows ARM64 executable uploaded successfully as PDFUtilities-Windows-arm64.exe"
        else
          echo "⚠️  Windows ARM64 executable not found, skipping upload"
        fi
        
    - name: Upload Linux executable
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Uploading Linux executable for version: $VERSION"
        # Rename the Linux executable to include OS and architecture
        cp ./linux-build/PDFUtilities ./PDFUtilities-Linux-x64
        gh release upload $VERSION ./PDFUtilities-Linux-x64 --clobber
        echo "Linux executable uploaded successfully as PDFUtilities-Linux-x64"
        
    # - name: Upload Linux ARM executable
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     VERSION=${GITHUB_REF#refs/tags/}
    #     echo "Uploading Linux ARM executable for version: $VERSION"
    #     cp ./linux-arm-build/PDFUtilities ./PDFUtilities-Linux-arm64
    #     gh release upload $VERSION ./PDFUtilities-Linux-arm64 --clobber
    #     echo "Linux ARM executable uploaded successfully as PDFUtilities-Linux-arm64"
        
    - name: Upload macOS ARM executable
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Uploading macOS ARM executable for version: $VERSION"
        # Rename the macOS ARM executable to include OS and architecture
        cp ./macos-arm-build/PDFUtilities ./PDFUtilities-macOS-arm64
        gh release upload $VERSION ./PDFUtilities-macOS-arm64 --clobber
        echo "macOS ARM executable uploaded successfully as PDFUtilities-macOS-arm64"
        
    - name: Upload macOS Intel executable
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Uploading macOS Intel executable for version: $VERSION"
        # Rename the macOS Intel executable to include OS and architecture
        cp ./macos-intel-build/PDFUtilities ./PDFUtilities-macOS-x64
        gh release upload $VERSION ./PDFUtilities-macOS-x64 --clobber
        echo "macOS Intel executable uploaded successfully as PDFUtilities-macOS-x64"
        
    - name: Upload source code
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Uploading source code for version: $VERSION"
        gh release upload $VERSION ./PDFUtilities-Source.zip --clobber
        echo "Source code uploaded successfully"
        
    - name: Verify release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Verifying release assets for version: $VERSION"
        gh release view $VERSION --json assets --jq '.assets[].name'
        echo "Release verification completed" 